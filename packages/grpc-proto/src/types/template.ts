// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: template.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface Invoice {
  no: string;
  date: string;
}

export interface Client {
  name: string;
  phone: number;
  email: string;
  address: string;
}

export interface Details {
  name: string;
  invoice: Invoice | undefined;
  client: Client | undefined;
}

export interface Header {
  logo?: string | undefined;
  details?: Details | undefined;
}

export interface Body {
  description: string;
  price: number;
  quantity: number;
}

export interface Footer {
  name: string;
  address: string;
  website: string;
  email: string;
  phone: number;
}

export interface Template1Data {
  header?: Header | undefined;
  body: Body[];
  note?: string | undefined;
  footer?: Footer | undefined;
}

export interface PdfStream {
  chunk?: Uint8Array | undefined;
  count?: number | undefined;
}

export interface StaticTemplateServiceClient {
  /** rpc Template1(Template1Data) returns (google.protobuf.Empty) {} */

  template2(request: Template1Data): Observable<PdfStream>;
}

export interface StaticTemplateServiceController {
  /** rpc Template1(Template1Data) returns (google.protobuf.Empty) {} */

  template2(request: Template1Data): Observable<PdfStream>;
}

export function StaticTemplateServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["template2"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StaticTemplateService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StaticTemplateService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STATIC_TEMPLATE_SERVICE_NAME = "StaticTemplateService";
